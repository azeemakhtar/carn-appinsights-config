using System;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;

namespace Carnegie.ApplicationInsights.Common
{
    public interface IMonitoringHelper
    {
        /// <summary>
        /// Explicitly create an request/operation so that all events within it share a common operation id.
        /// For REST services this is done automatically by Application Insights, but this method is useful in
        /// background services etc where there are no automatic requests.
        /// </summary>
        /// <remarks>The operation is active until disposed, so the returned object should normally be used in a using statement.</remarks>
        /// <param name="operationName"></param>
        /// <param name="operationId">Optional operation id. Will be autogenerated if null.</param>
        /// <returns></returns>
        CustomRequest CreateRequest(string operationName, string operationId = null);
    }

    public class MonitoringHelper : IMonitoringHelper
    {
        private readonly TelemetryClient _telemetryClient;

        public MonitoringHelper(TelemetryClient telemetryClient)
        {
            _telemetryClient = telemetryClient;
        }

        /// <summary>
        /// Explicitly create an request/operation so that all events within it share a common operation id.
        /// For REST services this is done automatically by Application Insights, but this method is useful in
        /// background services etc where there are no automatic requests.
        /// </summary>
        /// <remarks>The operation is active until disposed, so the returned object should normally be used in a using statement.</remarks>
        /// <param name="operationName"></param>
        /// <param name="operationId">Optional operation id. Will be autogenerated if null.</param>
        /// <returns></returns>
        public CustomRequest CreateRequest(string operationName, string operationId = null)
        {
            // Register an Application Insights request event to use as a root for all other events for this message
            var operationTelemetry = new RequestTelemetry { Name = operationName };
            operationTelemetry.Context.Operation.Id = operationId ?? Guid.NewGuid().ToString();
            operationTelemetry.Context.Operation.Name = operationName;
            var requestTelemetry = _telemetryClient?.StartOperation(operationTelemetry);
            
            return new CustomRequest(requestTelemetry);
        }
    }
}
